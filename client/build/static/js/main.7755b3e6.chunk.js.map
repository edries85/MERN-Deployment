{"version":3,"sources":["components/PetForm.js","components/PetDashboard.js","components/PetDetail.js","components/PetEdit.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["useState","name","setName","type","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","className","style","backgroundColor","onSubmit","e","preventDefault","axios","post","then","res","data","console","log","navigate","catch","err","onChange","target","value","message","to","props","animals","setAnimals","useEffect","get","color","map","pet","key","_id","setPet","id","onClick","petId","delete","put","PetForm","path","PetDashboard","PetDetail","PetEdit","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7755b3e6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\n\r\nexport default () => {\r\n    //keep track of what is being typed via useState hook\r\n    const [name, setName] = useState(\"\"); \r\n    const [type, setType] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [skill1, setSkill1] = useState(\"\");\r\n    const [skill2, setSkill2] = useState(\"\");\r\n    const [skill3, setSkill3] = useState(\"\");\r\n    const [ errors, setErrors ] = useState({});\r\n    //handler when the form is submitted\r\n    const onSubmitHandler = e => {\r\n        //prevent default behavior of the submit\r\n        e.preventDefault();\r\n        //make a post request to create a new pet\r\n        axios.post('http://localhost:8000/api/pet/', {\r\n            name,\r\n            type,\r\n            description,\r\n            skill1,\r\n            skill2,\r\n            skill3\r\n        })\r\n            .then(res=>{\r\n                if (res.data.errors) {\r\n                    setErrors(res.data.errors);\r\n                }\r\n                else {\r\n                    console.log(res);\r\n                    navigate('/pets')\r\n                }\r\n            })\r\n            .catch(err=>console.log(err))\r\n    }\r\n\r\n    //onChange to update Pet info\r\n    return (\r\n        <div className='container'>\r\n            <div className='jumbotron'style={{backgroundColor:'#0524'}}>\r\n                <h1>Pet Shelter</h1>\r\n                <h2>Know of a pet needing a home?</h2>\r\n                <form onSubmit={onSubmitHandler}>\r\n                    <p>\r\n                        <label>Name:</label><br/>\r\n                        <input type=\"text\" onChange = {(e)=>setName(e.target.value)}/>\r\n                        <span> { errors.name ? errors.name.message : \"\" } </span>\r\n                    </p> \r\n                    <p>\r\n                        <label>Type:</label><br/>\r\n                        <input type=\"text\" onChange = {(e)=>setType(e.target.value)}/>\r\n                        <span> { errors.name ? errors.name.message : \"\" } </span>\r\n                    </p>\r\n                    <p>\r\n                        <label>Description:</label><br/>\r\n                        <input type=\"text\" onChange = {(e)=>setDescription(e.target.value)}/>\r\n                        <span> { errors.name ? errors.name.message : \"\" } </span>\r\n                    </p>\r\n\r\n                    <p>\r\n                        <label>Skill1:</label><br/>\r\n                        <input type=\"text\" onChange = {(e)=>setSkill1(e.target.value)}/>\r\n                    </p>\r\n\r\n                    <p>\r\n                        <label>Skill2:</label><br/>\r\n                        <input type=\"text\" onChange = {(e)=>setSkill2(e.target.value)}/>\r\n                    </p>\r\n                    <p>\r\n                        <label>Skill3:</label><br/>\r\n                        <input type=\"text\" onChange = {(e)=>setSkill3(e.target.value)}/>\r\n                    </p>\r\n                        <input type=\"submit\" value='Add Pet' className='btn btn-primary'/> <Link to = '/pets'><input type = 'submit' value = 'Cancel'className='btn btn-primary' style={{backgroundColor:'red'}} /></Link>\r\n                    \r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../App.css';\r\nimport { Link } from '@reach/router';\r\nimport axios from 'axios';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\n\r\n\r\n\r\nexport default props => {\r\n    const [ animals, setAnimals ] = useState([]);\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pet')\r\n            .then(res => setAnimals(res.data));\r\n    }, [])\r\n\r\n    return(\r\n        <div className= 'container'>\r\n            <div className= 'jumbotron' style={{backgroundColor:'#0524'}}>\r\n                <h1>Pet Shelter</h1>\r\n                <h2>These pets are looking for a home!</h2>\r\n                <p>\r\n                    <Link to= '/pets/new' className='btn btn-danger'> Add a pet to the Shelter</Link>\r\n                </p>\r\n                <center>\r\n                    <div>\r\n                    \r\n                        <table className='table'>\r\n                            <thead style={{backgroundColor:\"blue\",color:'white'}}>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Type</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                    {animals.map ( pet =>\r\n                                    <tr key= {pet._id}>\r\n                                    <td>{pet.name}</td>\r\n                                    <td>{pet.type}</td>\r\n                                    <td> <Link to={'/pets/' + pet._id}> <input type= 'submit' value='Details' className='btn btn-primary'/></Link> <Link to = {\"/pets/\" + pet._id + '/edit'}><input type = 'submit'className='btn btn-success' value = 'Edit' /></Link> </td>\r\n                                </tr>\r\n\r\n                                    \r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </center>\r\n            </div> \r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\nexport default props => {\r\n    const [ pet, setPet ] = useState ({})\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api/pet/\" + props.id)\r\n            .then(res => setPet({\r\n                ...res.data\r\n            }))\r\n    }, [])\r\n\r\n    const adoptPet = (petId) => {\r\n        axios.delete('http://localhost:8000/api/pet/' + petId)\r\n            .then(res => {\r\n                navigate(\"/pets\")\r\n            })\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className= 'jumbotron' style={{backgroundColor:'#0524'}}>\r\n            <h1>Pet Shelter</h1>\r\n            <Link to = '/pets' className='btn btn-primary'> Home </Link>\r\n            <h2>Details About {pet.name}</h2>\r\n            <p>Description: {pet.description}</p>\r\n            \r\n            <h3>Skills:</h3>\r\n            <p>{pet.skill1}</p>\r\n            <p>{pet.skill2}</p>\r\n            <p>{pet.skill3}</p>\r\n\r\n            <button onClick = { (e) => {adoptPet(pet._id)}} className='btn btn-primary' style={{backgroundColor:''}}> Adopt this pet! </button>\r\n            \r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\n\r\nexport default props => {\r\n    const { id } = props;\r\n    const [ name, setName ] = useState();\r\n    const [ type, setType ] = useState();\r\n    const [ description, setDescription ] = useState();\r\n    const [ skill1, setSkill1 ] = useState();\r\n    const [ skill2, setSkill2 ] = useState();\r\n    const [ skill3, setSkill3 ] = useState();\r\n    const [ errors, setErrors ] = useState({});\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pet/' + id)\r\n        .then(res => {\r\n            setName(res.data.name);\r\n            setType(res.data.type);\r\n            setDescription(res.data.description);\r\n            setSkill1(res.data.skill1);\r\n            setSkill2(res.data.skill2);\r\n            setSkill3(res.data.skill3);\r\n        })\r\n        }, [])\r\n\r\n\r\n        const updatePet = e => {\r\n\r\n            e.preventDefault();\r\n            axios.put('http://localhost:8000/api/pet/' + id, {\r\n                name,\r\n                type,\r\n                description,\r\n                skill1,\r\n                skill2,\r\n                skill3\r\n            })\r\n            .then(res => {\r\n                if (res.data.errors) {\r\n                    setErrors(res.data.errors);\r\n                }\r\n                else {\r\n                    console.log(res);\r\n                    navigate('/pets')\r\n                }\r\n            })\r\n            .catch(err =>console.log(err))\r\n                \r\n        }\r\n\r\n    return(\r\n        <div className= 'container'>\r\n            <div className= 'jumbotron'style={{backgroundColor:'#0524'}}>\r\n            <h1>Pet Shelter</h1>\r\n            <h2>Edit this Pet</h2>\r\n\r\n            <form onSubmit={updatePet}>\r\n                <p>\r\n                    <label>Name:</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setName(e.target.value)} />\r\n                    <span> { errors.name ? errors.name.message : \"\" } </span>\r\n                </p> \r\n                <p>\r\n                    <label>Type:</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setType(e.target.value)} />\r\n                    <span> { errors.name ? errors.name.message : \"\" } </span>\r\n                </p>\r\n                <p>\r\n                    <label>Description:</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setDescription(e.target.value)} />\r\n                    <span> { errors.name ? errors.name.message : \"\" } </span>\r\n                </p>\r\n\r\n                <p>\r\n                    <label>Skill1:</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setSkill1(e.target.value)}/>\r\n                </p>\r\n\r\n                <p>\r\n                    <label>Skill2:</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setSkill2(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Skill3:</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setSkill3(e.target.value)}/>\r\n                </p>\r\n                    <input type=\"submit\" value='Edit Pet Info'/> <Link to = '/pets'><input type = 'submit' value = 'Cancel' /></Link>\r\n                \r\n            </form>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Router } from '@reach/router';\r\n\r\n\r\nimport PetForm from '../components/PetForm';\r\nimport PetDashboard from '../components/PetDashboard';\r\nimport PetDetail from '../components/PetDetail';\r\nimport PetEdit from '../components/PetEdit';\r\n\r\n\r\n\r\nexport default () => {\r\n    const [animals, setAnimals] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:8000/api/pet\")\r\n            .then(res=>setAnimals(res.data)) \r\n            .catch(err => console.log('Error:',err))        \r\n    }, [])\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <Router>\r\n                <PetForm path = '/pets/new'/>\r\n                <PetDashboard path= '/pets' animals={animals}/>\r\n                <PetDetail path = '/pets/:id'/>\r\n                <PetEdit path= '/pets/:id/edit/'/>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Main from './views/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from 'react-bootstrap/Table'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}